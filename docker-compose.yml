services:
  app:
    build: .
    container_name: web-app
    ports:
      - "3000:3000"
    restart: always
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    volumes:
      - ./app:/app
    networks:
      - elastic
  
  react-app:
    build:
      context: ./react-app
      dockerfile: Dockerfile
    container_name: react-app
    ports:
      - "5173:5173"
    restart: always
    # depends_on:
    #   app:
    #     condition: service_started
    volumes:
      - ./react-app:/app
    networks:
      - elastic

  db:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    restart: always
    networks:
      - elastic
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  elasticsearch:
    image: elasticsearch:7.9.2
    container_name: es
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: always
    environment:
      - discovery.type=single-node
    depends_on:
      db:
        condition: service_healthy
    networks:
      - elastic

  logstash:
    image: logstash:9.0.2
    container_name: logstash
    depends_on:
      db:
        condition: service_started
      elasticsearch:
        condition: service_started
      setup-es-index:
          condition: service_completed_successfully
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/jdbc:/usr/share/logstash/vendor/jar/jdbc
    environment:
      - LS_JAVA_OPTS=-Xmx1g -Xms1g
    ports:
      - "5044:5044"
    restart: always
    networks:
      - elastic
      
  setup-es-index:
    build:
      context: ./setup
      dockerfile: Dockerfile
    depends_on:
      - elasticsearch
    networks:
      - elastic
  
networks:
  elastic:
    driver: bridge